<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAMMOAADDDgAAAAAAAAAA
        AABTQSv/U0Aq/1NAKv9TQCr/U0Aq/1M/Kf9TPyn/Uz8o/1M+KP9TPif/Uz4n/1M+J/9UPyf/VD8o/1Q/
        KP9VPyj/VT8o/1U/KP9VPyj/VT8o/1Q/KP9UPyj/VD8o/1Q/KP9UPij/VD8o/1Q/KP9TPij/Uz4o/1M+
        J/9SPif/Uz4o/1NAKv9TQCn/Uz8p/1M/KP9TPyj/Uz8o/1M+J/9TPif/Uz4n/1M+J/9TPif/Uz4n/1Q/
        J/9UPyf/VD8o/1U/KP9VPyj/VT8o/1Q/KP9VPyj/VT8o/1Q/KP9UPyj/VD8o/1Q+J/9UPif/Uz4n/1M+
        KP9TPij/Uz4n/1M+J/9TPif/Uz8p/1M/KP9SPij/Uj4n/1I+J/9TPib/Uz4m/1M+Jv9TPib/Uz4m/1M+
        Jv9TPif/Uz4n/1Q/J/9UPyf/VD8n/1Q/J/9UPyf/VD8o/1Q/KP9UPyj/VD8o/1Q/KP9UPyj/Uz4n/1M+
        J/9TPif/Uz4n/1M+KP9TPif/Uz4n/1M+J/9TPyj/Uj4n/1I+Jv9SPSb/Uj4m/1I+Jv9SPib/Uz4m/1M+
        Jv9TPib/Uz4m/1M+Jv9TPib/Uz4n/1Q+J/9UPyf/VD8n/1Q/J/9UPyf/VD8n/1Q/J/9UPyj/VD4o/1Q+
        J/9TPif/Uz4n/1M+J/9TPif/Uz4n/1M+J/9TPif/Uz4n/1Q/KP9TPyf/Uj4l/1I+Jv9SPib/Uj4m/1I+
        Jv9TPib/Uz4m/1M+Jv9SPib/Uz4m/1M+Jv9TPib/Uz4m/1Q+J/9UPif/VD8n/1Q/J/9UPyf/VD8n/1Q/
        J/9UPij/VD4n/1M+J/9TPif/Uj0m/1M+J/9TPif/Uz4n/1M+J/9SPif/VEAo/1M+Jv91ZVL/sqid/7Op
        nv+zqp//sqme/7Oqn/+yqZ7/s6qf/7OroP+zqqD/tKqg/7SqoP+0qqD/tKqg/7SqoP+0q6D/tKug/7Sr
        oP+zqZ//s6qg/7Opn/+zqZ//s6mf/7Srof+YjH7/V0Is/1M+J/9TPif/Uz4n/1M+J/9VQCj/Uz4m/3Zl
        Uv+9tKv/7Orn/8fAuP/r6eb/xb+3/+3r6P/EvbX/s6qf/7Srof+0q6H/tKuh/7Srof+0q6H/tKuh/7Sr
        of+1q6H/tayi/+bi3//SzMb/39vW/9XQy//e2tb/2NPO/5iLff9XQiz/Uz4m/1M+Jv9TPif/Uz4n/1VA
        KP9VQCj/Uz4m/2pXQ//Z1c//raOY/9nV0P9xYEz/wrqy/6CViP9RPCX/UDsj/1A7JP9QOyT/UTsk/1E8
        JP9RPCT/UTwk/1A6Iv9uXEj/1tHM/31tW/+0q6H/wrqy/87Iwf+glYj/UDsj/1M+Jv9SPib/Uz4m/1M+
        J/9TPyf/VUAo/1VAKP9UPif/YEw2/721rP/V0Mr/v7eu/19MNv+BcWD/3NjT/6Wajv9/cF//fW1b/35u
        Xf9/b13/f29d/35uXP9+blz/jX9v/8/Kw/+3rqX/WEQt/5WIef/Uz8n/0szG/4R2ZP9QPCT/Uj4m/1I+
        Jv9SPib/Uz4n/1M/KP9VQCj/VT8o/1Q/J/9UPyf/WkYv/11JM/9aRi//Uj4m/1M+J/+GeGf/y8W+/9zY
        0//u7On/39vW/9nUz//b19L/7evp/+Hd2f/W0cz/q6GV/2FOOf9SPSb/V0Ir/1xJM/9bSTL/VEEp/1I+
        Jv9SPif/Uj4m/1I+J/9TPyj/VEAp/1VAKP9VPyf/VD8n/1M+Jv9SPSX/Uj0l/1I8Jf9SPSb/Uj0l/1E8
        JP9ZRS3/cmFN/9XQyv+KfGz/eGhV/3hoVf/Tzcf/i31t/19LNf9UPyf/Uj0l/1M+J/9TPib/Uj0l/1E9
        Jf9SPib/Uj4m/1I+J/9SPif/Uz8o/1RAKf9VQSr/VD8n/1Q/J/9TPib/Uz4m/1M+Jv9SPSb/Uj0m/1I9
        Jv9SPSb/Uj0m/1E8JP9eSzX/19LN/9bRzP/a1dD/zsjB/+Dc2P96alj/UDsi/1M+Jv9TPib/Uz4m/1M+
        Jv9TPib/Uj4m/1I+Jv9SPib/Uj4n/1M/KP9TQCn/VEEp/1VCKv9TPib/Uz4m/1M+Jv9SPSb/Uj0m/1I9
        Jv9SPSb/Uj0m/1I9Jv9SPSb/UDsj/21cSP/l4t//u7Op/35vXv+zqqD/8O7s/3pqWP9ROyP/Uz4m/1M+
        Jv9TPib/Uz4m/1I+Jv9SPib/Uj4m/1I+Jv9SPif/Uz8o/1NAKf9UQSn/VEAp/1I9Jf9SPSb/Uj0m/1I9
        Jv9SPib/Uj0m/1I9Jv9SPSb/Uj0m/1E8JP9fTTb/w7yz/7y0q/9cSTL/Tjoh/2RRPP/X0sz/fGxa/1E7
        I/9TPib/Uz4m/1M+Jv9SPib/Uj4m/1I+Jv9RPib/UT4m/1I+J/9SPyf/Uz8o/1M/KP9TPyj/V0Mt/1I9
        Jv9SPSb/Uj0m/1I+Jv9SPib/Uj0m/1I9Jv9RPSX/WkYv/7atov/Gv7f/Yk85/1E8JP9RPCT/Z1VA/9TP
        yf90ZFD/UTwk/1M+Jv9SPif/Uj4n/1I/J/9SPyf/Uj8n/1E+J/9RPib/UT4m/1E+Jv9SPyf/Uj8o/1NA
        Kf9kVUT/UTwk/1I9Jv9SPib/Uj4m/1I+Jv9SPib/Uj0l/1VBKf+onpL/+fn4/7evpf9mVD7/UDwk/1ZD
        K/+vpZr/xr+3/1tIMv9RPSb/Uj4n/1I+J/9SPyf/Uj8n/1I/KP9TQCr/UkAp/1I/KP9SPyj/Uj8o/1I/
        KP9SPyj/Uj8o/2RVRP9RPCT/Uj0m/1I+Jv9SPib/Uj4l/1I+Jf9RPST/k4Z3/+He2f+5saf/y8W+/8zG
        v/9nVUD/nZKE/9jTzf9yYk//UTwl/1I+KP9SPyj/Uj8o/1I/KP9SPyj/Uj8p/1NAKv9SQCr/UkAp/1NA
        Kf9UQSr/VEIs/1RBK/9SPyj/V0Qt/1I+Jf9TPiX/Uz4m/1I+Jv9SPiX/UT0k/2BON//RzMX/joBw/1hD
        LP9gTTj/xL21/8/Jwv/Z1M//fm9e/1A8Jf9RPij/UT8o/1E/KP9RPyj/UT8o/1E/KP9SPyn/UkAq/1JA
        Kv9SPyn/U0Ap/1RBKv9VQy7/VkQv/1hELP9SPiX/Uj4l/1M+Jf9TPib/Uz4m/1I+Jf9QPCP/cF9L/9LN
        xv9lUj7/m46B/3BfTP+ZjX//8/Lw/4p9bf9QPCX/UT4n/1E/KP9RPyn/UT8o/1E/KP9RPyj/UT8o/1E/
        Kf9SQCr/UkAq/1I/Kf9SPyn/U0Ap/1VDLv9bSjb/ZFI6/1I+Jf9SPiX/Uz4m/1M+Jv9TPib/Uj4m/1E9
        JP9nVkD/1M/K/3dnVf9mVED/XEkz/7Kpn//x8O7/g3Vl/087JP9RPSf/UT4o/1E/Kf9RPyj/UT8o/1E/
        KP9RPyn/UT8p/1JAKv9RPyr/UT8o/1I/KP9TQSv/VUUy/11NO/9lVUL/Uj4l/1I+Jv9TPib/Uz4m/1M+
        Jv9TPib/Uj4m/1VBKf+vppv/z8rE/4t9bf+jmIz/2dXQ/7Wto//Y1M//d2dV/087Jf9QPSf/UD0n/1A9
        J/9PPSf/Tz4n/1A+KP9QPij/UT8p/1I/Kv9RPyn/Uj8o/1NBKv9VRDD/XEw4/2RVQ/9SPiX/Uj4m/1I+
        Jv9TPyb/Uz8n/1M/J/9TPyj/Uj8n/2JQO/+vpZr/6ufl/+vp5v+Je2v/V0Qt/6iek//V0Mr/bFxK/088
        Jf9QPSf/UD0n/089J/9PPSf/Tjwl/1RCLf9bSjX/Tz0n/1E+KP9SPyn/VEEq/1ZDLf9dTDb/ZFVC/1I+
        Jv9SPib/Uj4m/1I/J/9SPyf/Uj8o/1M/KP9TQCn/U0Ap/1VCK/+Hemr/39vX/5CDc/9TQCn/W0o0/7au
        pf/Lxb7/a1tI/15MOP9eTTn/WUgz/1E/Kv9pWUb/tq6l/9HMxv+Ie2z/VUMu/1E/KP9TQCr/VkIs/15M
        Nf9lVUL/Uj4m/1I+Jv9SPyf/Uj8o/1I/KP9SPyn/U0Ap/1NBKv9UQSv/VEIr/1RCK/+Th3n/3trW/4F0
        Y/9QPif/X086/8zHwP/h3tv/1NDL/9jUz/+0raT/aVtJ/83Iwv/Fv7n/qKCX/9rX0/+FeWr/UD4n/1NA
        Kv9UQSv/WEUu/15MNv9SPib/Uj8n/1I/KP9SPyj/Uj8p/1NAKv9TQSr/VEIr/1VDLf9WRC7/VkQu/1hG
        MP+hl4v/2tfS/3ZoV/9RQCr/tq6l/8G7s/+IfG7/pp6T/+3r6f/U0Mv/5eLg/2teTf9PPyv/bmBP/2VW
        Q/9RPyn/UkAq/1NBK/9UQiz/VUIs/1I+J/9SPyf/Uj8o/1I/Kf9SQCn/U0Aq/1NCK/9UQyz/VUQt/1ZF
        L/9XRS//VkQu/1pIM/+tpZv/2dXQ/7Wupf/u7Or/1M/K/7Wupf/JxL7/5OHe/7Con//k4d7/f3Nl/11O
        PP+Vi3//eGpa/1FAKf9SQSv/UkEq/1NBK/9UQSv/Uj8n/1E/KP9SPyj/Uj8p/1JAKf9SQSr/U0Ir/1RC
        LP9VRC3/VkUv/1dFL/9WRS//VEMt/1xLN/+bkYT/u7Ws/7Con/+wqJ7/samf/7GqoP+Rh3n/W0s4/7Co
        n//c2NT/0s7J/9TQy/93aln/UT8p/1JBK/9TQSv/VEIr/1RCK/9RPyj/UT8o/1E/KP9RQCn/UkAp/1JB
        Kv9TQiv/VEIs/1VELf9WRS7/V0Uv/1ZFL/9VQy7/U0Is/1JBK/9UQy3/UkEr/1FAKv9RQCv/UUAr/1BA
        K/9RQCv/VkYy/4yBdP+on5X/Z1hH/1E/Kv9SQCr/UkAq/1JAKv9TQSr/VEIr/1E/KP9RPyj/UT8p/1FA
        Kf9SQCr/UkEr/1NCK/9UQiz/VUMt/1ZELv9WRS//VkQu/1VDLf9UQi3/U0Is/1JBK/9SQSv/UkAr/1JA
        K/9RQCz/UUAs/1FALP9RQCv/UEAr/1BALf9QQCv/UkAr/1JAKv9SQCr/UkAq/1NBKv9UQiv/UT8p/1E/
        Kf9RPyn/UUAp/1JAKv9SQSv/U0Ir/1RCLP9VQy3/VkQu/1ZFL/9WRC7/VUMt/1RCLP9TQiz/U0Er/1JB
        K/9SQCv/UkAr/1FALP9RQCz/UUAs/1FAK/9RQS3/UUEt/1FBLP9RQCr/UkAq/1JAKv9SQCr/U0Eq/1NB
        K/9RQCn/UT8p/1E/Kf9RQCn/UUAq/1JBKv9TQiv/VEIs/1VDLf9WRC7/VkUu/1ZELv9VQy3/VEIs/1NC
        LP9TQSv/UkAr/1JAK/9SQCv/UUAs/1FALP9RQCv/UUAr/1FBLf9RQS3/UUAs/1FAKv9RQCr/UUAp/1JA
        Kf9TQCr/U0Eq/1FAKf9RPyn/UT8p/1FAKf9RQCr/UkEq/1NCK/9TQiz/VUMt/1ZELv9WRS7/VkQu/1VD
        Lf9UQiz/U0Is/1JBK/9SQCv/UkAq/1FAK/9RQCv/UUAr/1FAK/9RQCv/UUEs/1FBLf9RQCz/UUAq/1FA
        Kv9RQCn/UUAp/1NAKv9TQSr/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=
</value>
  </data>
</root>